<%
if not 'rkt' in shared:
    shared['rkt'] = {}

    def rkt_default(type_obj, default=None):
        base_type = type_obj['name']
        if default == None:
            if base_type == "string":
                return '""'
            elif base_type == "list":
                return '(vector)'
            elif base_type == "dictionary":
                return '(make-hash)'
            elif base_type == "int" or base_type == "float":
                return '0'
            elif base_type == "boolean":
                return '#f'
            else:
                return 'null'
        else:
            return rkt_value(type_obj, default)
    shared['rkt']['default'] = rkt_default

    def rkt_value(type_obj, default):
        base_type = type_obj['name']
        if base_type == "string":
            return '"' + default + '"'
        elif base_type == "boolean":
            return "#t" if default else "#f"
        else:
            return default
    shared['rkt']['value'] = rkt_value

    def rkt_type(type_obj):
        base_type = type_obj['name']
        if base_type == "list":
            return "(vector {} ... )".format(rkt_type(type_obj['valueType']))
        elif base_type == "dictionary":
            return "(hash ({} {}) ... )".format(rkt_type(type_obj['keyType']), rkt_type(type_obj['valueType']))
        elif base_type == "boolean":
            return "bool"
        else:
            return base_type
    shared['rkt']['type'] = rkt_type

    def rkt_cast(type_obj):
        base_type = type_obj['name']
        if base_type == "string":
            return "string"
        elif base_type == "int":
            return "int"
        elif base_type == "float":
            return "float"
        elif base_type == "boolean":
            return "bool"
        else:
            return ""
    shared['rkt']['cast'] = rkt_cast

    def rkt_args(arguments):
        to_join = []
        for argument in arguments:
            arg_str = argument['name']
            if argument['optional']:
                default_value = rkt_value(argument['type'], argument['default'])
                arg_str = "[" + arg_str + " " + default_value + "]"
            to_join.append(arg_str)
        return " ".join(to_join)
    shared['rkt']['args'] = rkt_args

    def rkt_format_description(description):
        return description \
            .replace("Null", "null") \
            .replace("list", "vector") \
            .replace("List", "vector") \
            .replace("dictionary", "hash") \
            .replace("Dictionary", "hash") \
            .replace("False", "#f") \
            .replace("True", "#t")
    shared['rkt']['format_description'] = rkt_format_description

%>